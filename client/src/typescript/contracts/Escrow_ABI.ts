/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Escrow_ABIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approval"
      | "approveSale"
      | "buyer"
      | "depositBuyer"
      | "depositByBuyer"
      | "depositByLender"
      | "depositedAmount"
      | "escrowAmount"
      | "getBalance"
      | "inspectionPassed"
      | "inspector"
      | "isListed"
      | "lend"
      | "lender"
      | "list"
      | "meToBuyer"
      | "meToInspector"
      | "meToLender"
      | "purchasePrice"
      | "realEstateNFTAddress"
      | "seller"
      | "transactionSale"
      | "updateInspectionStatus"
      | "withEscrow"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovedSaleByEvent"
      | "DepositedByBuyerEvent"
      | "InspectionEvent"
      | "ListEvent"
      | "SaleEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyer", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "depositBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositByBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositByLender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inspectionPassed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inspector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lend", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "meToBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "meToInspector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "meToLender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "realEstateNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seller",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInspectionStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withEscrow",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositByBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositByLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inspectionPassed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "meToBuyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "meToInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "meToLender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "realEstateNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInspectionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withEscrow", data: BytesLike): Result;
}

export namespace ApprovedSaleByEventEvent {
  export type InputTuple = [
    when: BigNumberish,
    nftID: BigNumberish,
    approver: AddressLike
  ];
  export type OutputTuple = [when: bigint, nftID: bigint, approver: string];
  export interface OutputObject {
    when: bigint;
    nftID: bigint;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedByBuyerEventEvent {
  export type InputTuple = [
    when: BigNumberish,
    nftID: BigNumberish,
    buyer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    when: bigint,
    nftID: bigint,
    buyer: string,
    amount: bigint
  ];
  export interface OutputObject {
    when: bigint;
    nftID: bigint;
    buyer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InspectionEventEvent {
  export type InputTuple = [
    when: BigNumberish,
    nftID: BigNumberish,
    inspector: AddressLike,
    passed: boolean
  ];
  export type OutputTuple = [
    when: bigint,
    nftID: bigint,
    inspector: string,
    passed: boolean
  ];
  export interface OutputObject {
    when: bigint;
    nftID: bigint;
    inspector: string;
    passed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListEventEvent {
  export type InputTuple = [
    when: BigNumberish,
    nftID: BigNumberish,
    seller: AddressLike,
    purchasePrice: BigNumberish,
    escrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    when: bigint,
    nftID: bigint,
    seller: string,
    purchasePrice: bigint,
    escrowAmount: bigint
  ];
  export interface OutputObject {
    when: bigint;
    nftID: bigint;
    seller: string;
    purchasePrice: bigint;
    escrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleEventEvent {
  export type InputTuple = [
    when: BigNumberish,
    nftID: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike
  ];
  export type OutputTuple = [
    when: bigint,
    nftID: bigint,
    seller: string,
    buyer: string
  ];
  export interface OutputObject {
    when: bigint;
    nftID: bigint;
    seller: string;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow_ABI extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow_ABI;
  waitForDeployment(): Promise<this>;

  interface: Escrow_ABIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approval: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approveSale: TypedContractMethod<
    [_nftID: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyer: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  depositBuyer: TypedContractMethod<[_nftID: BigNumberish], [void], "payable">;

  depositByBuyer: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  depositByLender: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  depositedAmount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  escrowAmount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  inspectionPassed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  inspector: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  isListed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  lend: TypedContractMethod<[_nftID: BigNumberish], [void], "payable">;

  lender: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  list: TypedContractMethod<
    [
      _nftID: BigNumberish,
      _purchasePrice: BigNumberish,
      _escrowAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  meToBuyer: TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;

  meToInspector: TypedContractMethod<
    [_nftID: BigNumberish],
    [void],
    "nonpayable"
  >;

  meToLender: TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;

  purchasePrice: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  realEstateNFTAddress: TypedContractMethod<[], [string], "view">;

  seller: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transactionSale: TypedContractMethod<
    [_nftID: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateInspectionStatus: TypedContractMethod<
    [_nftID: BigNumberish, _inspectionPassed: boolean],
    [void],
    "nonpayable"
  >;

  withEscrow: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approval"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approveSale"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyer"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "depositBuyer"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "depositByBuyer"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositByLender"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositedAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "escrowAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inspectionPassed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "inspector"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isListed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lend"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "lender"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<
    [
      _nftID: BigNumberish,
      _purchasePrice: BigNumberish,
      _escrowAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "meToBuyer"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "meToInspector"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "meToLender"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchasePrice"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "realEstateNFTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seller"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transactionSale"
  ): TypedContractMethod<[_nftID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInspectionStatus"
  ): TypedContractMethod<
    [_nftID: BigNumberish, _inspectionPassed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withEscrow"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getEvent(
    key: "ApprovedSaleByEvent"
  ): TypedContractEvent<
    ApprovedSaleByEventEvent.InputTuple,
    ApprovedSaleByEventEvent.OutputTuple,
    ApprovedSaleByEventEvent.OutputObject
  >;
  getEvent(
    key: "DepositedByBuyerEvent"
  ): TypedContractEvent<
    DepositedByBuyerEventEvent.InputTuple,
    DepositedByBuyerEventEvent.OutputTuple,
    DepositedByBuyerEventEvent.OutputObject
  >;
  getEvent(
    key: "InspectionEvent"
  ): TypedContractEvent<
    InspectionEventEvent.InputTuple,
    InspectionEventEvent.OutputTuple,
    InspectionEventEvent.OutputObject
  >;
  getEvent(
    key: "ListEvent"
  ): TypedContractEvent<
    ListEventEvent.InputTuple,
    ListEventEvent.OutputTuple,
    ListEventEvent.OutputObject
  >;
  getEvent(
    key: "SaleEvent"
  ): TypedContractEvent<
    SaleEventEvent.InputTuple,
    SaleEventEvent.OutputTuple,
    SaleEventEvent.OutputObject
  >;

  filters: {
    "ApprovedSaleByEvent(uint256,uint256,address)": TypedContractEvent<
      ApprovedSaleByEventEvent.InputTuple,
      ApprovedSaleByEventEvent.OutputTuple,
      ApprovedSaleByEventEvent.OutputObject
    >;
    ApprovedSaleByEvent: TypedContractEvent<
      ApprovedSaleByEventEvent.InputTuple,
      ApprovedSaleByEventEvent.OutputTuple,
      ApprovedSaleByEventEvent.OutputObject
    >;

    "DepositedByBuyerEvent(uint256,uint256,address,uint256)": TypedContractEvent<
      DepositedByBuyerEventEvent.InputTuple,
      DepositedByBuyerEventEvent.OutputTuple,
      DepositedByBuyerEventEvent.OutputObject
    >;
    DepositedByBuyerEvent: TypedContractEvent<
      DepositedByBuyerEventEvent.InputTuple,
      DepositedByBuyerEventEvent.OutputTuple,
      DepositedByBuyerEventEvent.OutputObject
    >;

    "InspectionEvent(uint256,uint256,address,bool)": TypedContractEvent<
      InspectionEventEvent.InputTuple,
      InspectionEventEvent.OutputTuple,
      InspectionEventEvent.OutputObject
    >;
    InspectionEvent: TypedContractEvent<
      InspectionEventEvent.InputTuple,
      InspectionEventEvent.OutputTuple,
      InspectionEventEvent.OutputObject
    >;

    "ListEvent(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      ListEventEvent.InputTuple,
      ListEventEvent.OutputTuple,
      ListEventEvent.OutputObject
    >;
    ListEvent: TypedContractEvent<
      ListEventEvent.InputTuple,
      ListEventEvent.OutputTuple,
      ListEventEvent.OutputObject
    >;

    "SaleEvent(uint256,uint256,address,address)": TypedContractEvent<
      SaleEventEvent.InputTuple,
      SaleEventEvent.OutputTuple,
      SaleEventEvent.OutputObject
    >;
    SaleEvent: TypedContractEvent<
      SaleEventEvent.InputTuple,
      SaleEventEvent.OutputTuple,
      SaleEventEvent.OutputObject
    >;
  };
}
